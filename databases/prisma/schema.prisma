// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model sample {
  id   String @id @db.VarChar(100)
  name String @db.VarChar(100)
}

model Customer {
  id       String    @id @db.VarChar(100)
  name     String    @db.VarChar(100)
  email    String    @unique @db.VarChar(100)
  phone    String    @unique @db.VarChar(100)
  wallet   Wallet?
  comments Comment[]
  likes    Like[]
  loves    Product[] @relation("loves")

  @@map("customers")
}

model Product {
  id       String     @id @db.VarChar(100)
  name     String     @db.VarChar(100)
  price    Int
  stock    Int
  category String     @db.VarChar(100)
  likedBy  Like[]
  lovesBy  Customer[] @relation("loves")

  @@fulltext([name])
  @@map("products")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  @@map("categories")
}

model Wallet {
  id          String   @id @db.VarChar(100)
  balance     Int      @db.Int
  customer_id String   @unique @db.VarChar(100)
  customer    Customer @relation(fields: [customer_id], references: [id], map: "customer_to_wallet_fl")

  @@map("wallet")
}

model Comment {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String?  @db.VarChar(100)
  customer_id String   @db.VarChar(100)
  customer    Customer @relation(fields: [customer_id], references: [id], map: "customer_to_comment_fk")

  @@map("comments")
}

model Like {
  customer_id String   @db.VarChar(100)
  product_id  String   @db.VarChar(100)
  customer    Customer @relation(fields: [customer_id], references: [id], map: "customer_to_like_fk")
  product     Product  @relation(fields: [product_id], references: [id], map: "product_to_like_fk")

  @@id([customer_id])
  @@map("likes")
}
